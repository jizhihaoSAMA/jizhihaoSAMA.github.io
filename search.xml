<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装tesseract的那些坑。]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%AE%89%E8%A3%85tesseract%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;最近准备试一下验证码识别，学习的时候发现还是要安装一下tesseract-OCR，来进行识别。研究半天，我这里说一下我自己的安装技巧d(`･∀･)b。 （1）去官网(点击去官网)先下载任意版本，版本后面有dev或者beta的代表是测试版，不建议下载（如果没有梯子的，我这里上传到度盘了，你们可以自行下载，度盘连接，提取码：nw9s）（2）坑了我很久的地方(´ﾟдﾟ`)：在下载安装包之后在勾选的界面，后面有(download)，建议不要下载！（有梯子而且对自己的梯子速度打包票的人可以下载。）我要哭了这里，下载速度超级感人，我的梯子下东西慢的要死，要是你们没有梯子的话，我建议你们去GitHub上面下载。下载地址，在下载好压缩包后，直接将所有的文件全部解压到安装目录下的tessdata下。如图（压缩包里面会有一个文件夹和一些文件，可以直接全部放到这里面）：直接建议你们下所有的语言包，反正也不大。 （3）设置环境变量这个还是比较简单的。在 “ 此电脑 ” 下右击点击 “ 属性 ” ，点击左边的 “ 系统保护 ” 。在 “ 高级 ”一栏里面点击 “ 环境变量 ”。 双击红圈的位置，在后面输入安装的路径就可以了 在cmd里面直接输入1tesseract --version 显示版本后就代表你安装成功了！(・ω・)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python自制翻译软件的详细过程。（requests+tkinter+pyinstaller）]]></title>
    <url>%2F2019%2F04%2F25%2Fpython%E8%87%AA%E5%88%B6%E7%BF%BB%E8%AF%91%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%E3%80%82%EF%BC%88requests%2Btkinter%2Bpyinstaller%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;这里直接爬取的是有道翻译。 第一步：利用requests库爬取有道翻译&emsp;&emsp;有两种解决网站反爬的措施：&emsp;&emsp;1、直接暴力破解有道翻译的salt，sign，ts，bv值。&emsp;&emsp;2、修改url绕过反爬。 &emsp;&emsp;在有道页面按下F12并刷新，随便输入一句话进行翻译，可以在network项里面发现一个名为translate….什么的，打开其response项，可以发现我输入的话和翻译。 看headers里面的data： 可以看到 i 后面的就是你输入的东西，至于红圈里面的东西，就是网站反爬所用的。我这里只讲绕过反爬的url，如果想暴力破解的，可以参考这篇博客 然后就可以利用headers=header来模拟浏览器了。将这里面的request headers里面的内容全部复制一遍，并加上引号。 坑了我好久的一个坑(☍﹏⁰。) ：将request headers里面的Content-Type属性也复制进去，导致只能输入英文，输入其他语言文字结果返回的是’???’。 我也不知道为什么这里返回会有问题。当时我也是想了很久，试了下日文也是’???’，搞不懂为什么返回的是问号，我拿别人的代码可以用，但我的就不行，我对比了一下，代码没有什么错误，大致是一样的。但我发现他的headers以及data里面和我不一样，于是我就试试把headers里面的代码一行行删掉进行尝试，最终发现是Content-Type属性搞的鬼(╯‵□′)╯︵┴─┴，去掉这行后结果就正常了。（我猜应该是这个属性限制了输入的文本，也就是只能识别英文，输入其他语言的文字不识别乱码则输入进去的时候就输入的是’???’，所以返回的就是’???’）。 爬取什么的还是和一般爬虫的思路一样，不过这里要注意了，url不能简单的使用有道翻译的原网站：http://fanyi.youdao.com/ 。原网站使用了反爬，我这里找到了两个可以绕过爬虫的url：1、http://fanyi.youdao.com/translate 。这个网站点进去还是会跳到有道翻译的网站去，但按F12发现该网站是一个301重定向的状态，也就是进入该网站还是会自动跳到有道翻译的网站，但这样却能直接跳过网站的反爬，真神奇。（我也不知道怎么解释（¯﹃¯），不过得出一个结论，（大概吧）如果网站反爬的话，可以通过能定向到该网站的url进行爬虫可以绕过反爬措施。）2、也是在该translate……下可以找到翻译的url，直接复制后，去掉translate后面的’_o’字符也可以绕过反爬。 这里的部分代码如下，返回的是翻译的结果：1234567891011121314trans = input()data=&#123; &apos;i&apos;:trans, ......&#125;header=&#123; &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;, ......&#125;url = &apos;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&apos;response = requests.post(url,headers=header,data=data)a = response.json()translation = a[&apos;translateResult&apos;][0][0][&apos;tgt&apos;]print(translation) 第二步：利用tkinter做界面。这里都是些基本操作，tkinter的基础就能做出来。不过要知道以下知识：①text文本框有一个state，有disabled（只读）和normal（可读可写）两种属性，要翻译的文本框可以不用设置state，翻译的结果就设置disabled。顺便还可以给它加一个背景颜色。’#ccc’更加生动（吃了文化的亏，不知道怎么形容了）。②在定义完后要把东西放进去，有3种方法：pack（），grid（），place（）。推荐使用grid（）方法，关于区别，可以看这篇博客 第三步：利用pyinstaller打包成exe文件。这里安装坑也多。详见这篇我之前写的博客。安装完成后。在cmd中输入cd 你的.py文件所在的目录。然后输入pyinstaller -F -w xxx.py（-w是为了不显示dos窗口）等待一段时间，就打包完成啦。exe就在目标目录下的dist文件夹下。也许你会觉得图标有点丑，我这里有一个教程，详见这篇博客对了，如果你应用图标后发现图标并没有变，你就可以把他移动一下（比如把它复制到桌面或者其他路径都可以），图标就变了。 这里贴上我的源代码吧(:3 」∠ )(……里面就是data和header里面的参数，这里略过了)12345678910111213141516171819202122232425262728293031323334353637import requestsimport tkinterdef en2zh(): trans = textbef.get(&apos;0.0&apos;,&apos;end&apos;) data = &#123; &apos;i&apos;:trans, &apos;...... &#125; header = &#123; &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;, ...... &#125; url = &apos;http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule&apos; response = requests.post(url,headers=header,data=data) a = response.json() translation = a[&apos;translateResult&apos;][0][0][&apos;tgt&apos;] textaft[&apos;state&apos;]=&apos;normal&apos; textaft.delete(1.0,&apos;end&apos;) textaft.insert(&apos;end&apos;,translation) textaft[&apos;state&apos;] = &apos;disabled&apos;windows = tkinter.Tk()windows.title(&quot;jizhihaoSAMA&apos;s Translation？not really!&quot;)windows.geometry(&apos;710x300&apos;)welc = tkinter.Label(windows,text=&quot;Let&apos;s start!&quot;,font=(&apos;Georgia&apos;,28))welc.grid(row=0,columnspan=3)textbef = tkinter.Text(width=40,height=10)textbef.grid(row=2,column=0)en2zhbutton = tkinter.Button(activebackground=&apos;#ccc&apos;,text=&apos;Auto translate&apos;,command=en2zh,font=(&apos;Georgia&apos;,12))en2zhbutton.grid(row=2,column=1,padx=15)textaft = tkinter.Text(bg=&apos;#ccc&apos;,width=40,height=10,state=&apos;disabled&apos;)textaft.grid(row=2,column=2)bef = tkinter.Label(windows,fg=&apos;brown&apos;,text=&quot;input the text you want to translate:&quot;,font=(&apos;Georgia&apos;,12))bef.grid(row=1,column=0,sticky=&apos;W&apos;)aft = tkinter.Label(windows,fg=&apos;brown&apos;,text=&quot;translation:&quot;,font=(&apos;Georgia&apos;,12))aft.grid(row=1,column=2,sticky=&apos;W&apos;)windows.mainloop() 界面如下：（看看这个翻译软件说的都是大实话~◝(^▿\^)◜） 大功告成！（๑ • ‿ • ๑ ）]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装pyinstaller的方法，及本人安装pyinstaller踩过的坑。]]></title>
    <url>%2F2019%2F04%2F24%2Fpyinstaller%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装pyinstaller首先要安装pywin32，在cmd中1pip install pywin32 安装完成后，继续输入1pip install pyinstaller 最后一行出现了1AttributeError: module &apos;setuptools.build_meta&apos; has no attribute &apos;__legacy__&apos; 奇怪的是，百度居然连这个代码一点都搜不到辣鸡百度，谷歌流弊，不过也就在github上面找到了一条记录，它安装的不是pyinstaller，是另外一个包。 出现的原因：1.包的版本pip&gt;=19.0.22.使用的是virtualenv与--system-site-packages（虽然我不知道这是什么意思）3.包的版本setuptools &lt; 40.8.0。4.您正在安装的软件包未build-backend=&quot;setuptools.build_meta&quot;在其中指定pyproject.toml。（我还是不知道这啥意思）本人的解决方法：更新setuptools包至最新版。当解决这个问题之后，继续输入1pip install pyinstaller又出现了问题，最后一行的代码是：1error: invalid command &apos;bdist_wheel&apos;本人的解决方法： 直接在cmd中输入pip install wheel即可 最后就是下载环节了。还没下载完成出现一大堆红字，然后很长一堆代码，结尾是Read timed out. 额，这个会点英语都知道吧？就是网络问题了，翻墙下载吧。就没问题了。 大功告成，安装成功~ \(・ω・)/]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义博客--看板娘透明度以及鼠标移动在头像上的变化]]></title>
    <url>%2F2019%2F04%2F15%2F%E7%9C%8B%E6%9D%BF%E5%A8%98%E9%80%8F%E6%98%8E%E5%BA%A6%E4%BB%A5%E5%8F%8A%E5%A4%B4%E5%83%8F%E5%8F%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;这篇博客所完成的事情花了我很久的时间。 看板娘的透明度&emsp;&emsp;之前看板娘的透明度我在网上找了很久都没找到相关教程，之前也看到有一些人的博客的看板娘是透明的，按照一些人的代码来看，应该在站点配置文件里面加入123react: defaultOpacity: 0.8 hoverOpacity: 1 但代码加入后并没有什么用，于是我便考虑在…/themes/next/source/css/custom/custom.styl中直接通过css代码来修改看板娘的透明度。那么问题就来了，当初我找不到看板娘的id或者class，我通过chrome的F12下通过鼠标移动来查看class和id的方法根本就移动不到看板娘上面，如图： 即使我把鼠标移动在血小板上面仍然显示的是其他的标签，后来我硬是会觉得不透明有时候缩放什么的会挡住字，不太好，于是还是不打算放弃(๑•̀ㅂ•́)و✧，在F12里面直接看文件的html代码，当我把所有的标签全部最简化的时候，我终于发现了看板娘的标签。 当时内心十分高兴的(:3 」∠ )，于是边马上在custom里面加上了如下代码：123.live-2d-widget &#123; opacity: 0.9;&#125; 保存后发现并没有透明，我才发现原来它这个style是内联的，哇，很难受，我只知道内联的优先级比外面的css代码的优先级高，所以当时又无可奈何了，于是开始了我的面向百度的编程，后面搜到优先级最高的是!important，于是在css里面加上了如下代码123.live-2d-widget &#123; opacity: 0.9 !important&#125; 于是便大功告成了。(๑•́ ₃ •̀๑) 移动到头像上面显示另外一个照片&emsp;&emsp;本人做这个的目的纯属只是为博客增加一点新意，我是打算将鼠标移动在我头像上面就可以笑起来的那种，上图： 这个就花了我很长的时间，首先我得要P图，这个还好，把眼睛抠出来之后直接填充掉然后再把眉毛抠出来填充掉再移动就可以了。比较烦的就是我P完之后当时硬是不知道怎么做。我试过如下方法： 失败的方法1：直接利用hover进行background-image修改&emsp;&emsp;这是我最先用的方法，但我查看源码：之后发现，它已经是直接插入了，不能修改成background插入。所以最终这个方法失败了。 失败的方法2：尝试通过jQuery的mouseenter事件和mouseleave事件进行图片变换&emsp;&emsp;这是我第二个想到的方法，我打开…/themes/next/source/js/post-details文件，我一看到这一串代码，我就想，噫，这很像jQuery的代码哟？太爽了把(๑•̀ω•́๑)，于是我便在这后面利用jQuery事件进行修改，保存之后发现原网页并没有变化，我当时就有点懵了，于是上网查查scrollspy方法，发现jQuery并没有这种方法，也就是说，原网页用的并不是jQuery的代码，也没有引入jQuery库，所以根本无法使用jQuery里面的方法。然后又发现这居然是bootstrap里面的滚动监听事件，额，由于bootstrap没学，我也就短短的看了几下有哪些事件，发现好像还是不能完成我的那种要求（我并没有仔细学），于是这个方法也失败了(´;ω;`)。 失败的方法3：利用js dom的onmouseover和onmouseout事件。&emsp;&emsp;我想着这里面有var，有function，有if语句什么的，我想这里面也有js语句把，我大概看了一下用法，发现要在原html的标签里面加入代码，但不能修改，所以这方法也失败了 : c。 失败的方法4：百度的答案在css后面加入expression表达式加入event事件。&emsp;&emsp;不多说了，上图： 我尝试着改了他的格式进行代码增加，但保存后还是没用（或许是我用的方式不对吧），后面我也查了css的expression的有关知识，据说曾经的浏览器支持expression表达式，但由于过于占资源等问题在IE8被微软弃用了，后来我在百度知道上问了关于expression的知识，也没有什么结果。 最后，终于成功了5555ε(*´･∀･｀)зﾞ&emsp;&emsp;万能的百度，我最终在百度大神的指导下了解了一种思路：由于情况的特殊，可以利用hover当鼠标移动在头像上的时候直接将透明度设置为0。然后设置其父系的background的大小和位置以及不能重复的属性（这个要调一会儿，因为要对比，使background图片完全在头像下面，大小要合适）。最终终于大功告成了！！！哈哈啊哈哈哈哈啊哈哈哈哈哈哈哈哈哈哈哈(๑´·ㅂ·｀๑)，前端真的很强大鸭~]]></content>
      <tags>
        <tag>博客</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python简单的图片爬去以及批量下载]]></title>
    <url>%2F2019%2F04%2F14%2Fpython%E5%9B%BE%E7%89%87%E7%88%AC%E5%8F%96%E5%92%8C%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;好久没学习爬虫了，于是天天浮躁搭博客，现在学习下载文件试试，今天就试了试下载图片，SADE，开始吧。d(`･∀･)b。 &emsp;&emsp;我是以谭文弟弟的博客为例子，这个B标签太多了内容太难提取了，我于是打算下载他博客中所有图片，我们先进入这个B的博客页面，按下F12查看源，可以得到页面的html代码，额，这里只爬取图片所以很简单图片嘛，我们只需要在标签的&lt;img src=&quot;x&quot;&gt;可以知道图片的url，那么我们先用表达式匹配所有x中的内容。 （一）利用正则表达式（还能用xpath，css选择器等方法）筛选出图片的url&emsp;&emsp;重要的地方来了，仅从字符串来看，我们只需要匹配src=”（第一个引号） 到 “&gt;（第二个引号）前，我们只需获取x的字符串，于是我们可以使用正则表达式的零宽断言，正则表达式应为：(?&lt;=src=&quot;).*(?=&quot;&gt;)。 （二）在筛选出url之后下载图片文件&emsp;&emsp;这里要用到文件编程IO的知识，图片应该以二进制方式打开，打开下载的路径并以打开方式为wb+。1with open(path,&apos;wb+&apos;) as f: 这里处理之后f就是一个文件变量（本人自己定义的），该变量有write函数，就是字面意思，写。当我们筛选出图片的url后，又要再次利用request.get(url)进行下载，然后再通过该response对象的.content对象（.content是二进制数据，.text是文本格式，由于图片是二进制，所以这里要用content）。 （三）关于下载文件的命名问题&emsp;&emsp;这里直接按照爬取后的顺序下载进行编号，对下载文件进行下载名字应该不能重复，不然最后应该只会保存最后一张图片（理论上来说）,所以在打开文件的时候，此时的路径就是存储的路径，打开的某.jpg（.png等图片格式都行，下载之后都会按照这种格式保存，由此都可以），比如这里可以在外面设置一个变量，然后每执行一次for循环就+1，之前我有这种思路但代码不知道怎么写，百度了一下，可以用引号与加法的结合，于是，成功啦(,,・ω・,,)。 这里是本人的代码哟，可以参考一下~123456789101112import requestsimport relan = requests.get(&quot;https://firstkaixin.github.io/2019/03/18/%E4%B8%80%E5%88%B0%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83%E7%9A%84%E9%A2%98%E7%9B%AE/#more&quot;)html = lan.textimghtml = re.compile(r&apos;(?&lt;=content=&quot;).+png(?=&quot;)&apos;)c = imghtml.findall(html) #返回一个匹配正则表达式字符串的所有的列表count = 0for i in c: imgdl = requests.get(i) #可以理解为获取下载链接 with open(&apos;F:\img&apos;+str(count)+&apos;.png&apos;,&apos;wb+&apos;) as f: #存储图片的路径和名字 f.write(imgdl.content) #以二进制写入文件 count+=1;]]></content>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美化博客]]></title>
    <url>%2F2019%2F04%2F10%2F%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;我终于把博客美化完了，真好，花了我两天时间&emsp;&emsp;我发现这个next主题还挺好用的，还好自己学了一点做web的语言，这个主题的能够通过主题文件夹里面的source/css/_custom文件进行某些地方的自定义，虽然不能全部自定义（本来我是准备利用hover对我的头像进行一点小改动的，但改不了，很难过。我p图p了很久（TヘT）。 &emsp;&emsp;那么我简单说一下我自己美化用的东西吧： &emsp;&emsp;1、拿血小板做看板娘（用了live2d），点我去教程呀(&gt;▽&lt;) ，我想改一改血小板的透明度呀，但不知道怎么改。 &emsp;&emsp;2、背景美化（当然我的不是完全按照他的来的，我自己还改了一些地方(｡･∀･)ﾉ），点我去教程呀(&gt;▽&lt;) &emsp;&emsp;3、阅读时长，总字数（这个由于更新后，网上的很多旧的方法都不可行，这个教程我找了很久。(*ﾟｰﾟ)）点我去教程啊(&gt;▽&lt;) &emsp;&emsp;4、浏览人数：这个自己百度不蒜子统计，就可以了，也可以去官网看文档。 &emsp;&emsp;5、这里还有一个更全的教程，可以看看：点我去看更详细的教程呀。(&gt;▽&lt;) &emsp;&emsp;自己打算再继续为看板娘设置更多功能~嘻嘻(๑•̀ㅂ•́)و✧]]></content>
      <tags>
        <tag>闲谈</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一个博客（搬家啦~）]]></title>
    <url>%2F2019%2F04%2F09%2F%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%90%AC%E5%AE%B6%E5%95%A6-%EF%BC%89%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&nbsp;我之前是用的CSDN的博客嘛，觉得CSDN的样式有点丑，广告也挺多的，想自己也搭个播客，这里是我的原博客~&emsp;&emsp;&nbsp;搭个人博客的方法我感觉有点小复杂，不过庆幸的是，有个人给了我办法。这里是方法哟，不用花多少时间。 &emsp;&emsp;&nbsp;博客的话我还是以这个更新为主把，另外一个博客的话看情况吧，要是我勤快的话就2个都更，懒得话就更新这个咯，hh]]></content>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
</search>
